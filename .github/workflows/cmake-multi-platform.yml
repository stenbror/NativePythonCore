name: Cross-Platform Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  BUILD_TYPE: Release
  VCPKG_COMMIT: '1318ab14aae14db20085441cd71366891a9c9d0c'

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Windows MSVC",
            os: windows-latest,
            cc: "cl",
            cxx: "cl"
          }
          - {
            name: "macOS Clang",
            os: macos-latest,
            cc: "clang",
            cxx: "clang++"
          }
          - {
            name: "Ubuntu GCC",
            os: ubuntu-latest,
            cc: "gcc",
            cxx: "g++"
          }
        build_type: [Debug, Release]

    steps:
      - uses: actions/checkout@v4

      # Windows-specific setup
      - name: Setup MSVC
        if: matrix.config.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v1.3.1

      - name: Setup vcpkg (Windows)
        if: matrix.config.os == 'windows-latest'
        uses: lukka/run-vcpkg@v7
        with:
          vcpkgGitCommitId: ${{ env.VCPKG_COMMIT }}
          setupOnly: true

      - name: Cache vcpkg (Windows)
        if: matrix.config.os == 'windows-latest'
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/vcpkg
            !${{ github.workspace }}/vcpkg/buildtrees
            !${{ github.workspace }}/vcpkg/packages
            !${{ github.workspace }}/vcpkg/downloads
          key: vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}

      - name: Install Boost (Windows)
        if: matrix.config.os == 'windows-latest'
        run: |
          vcpkg install boost-test:x64-windows
          vcpkg integrate install

      # macOS-specific setup
      - name: Install Boost (macOS)
        if: matrix.config.os == 'macos-latest'
        run: |
          brew update
          brew install boost
          echo "BOOST_ROOT=$(brew --prefix boost)" >> $GITHUB_ENV

      # Ubuntu-specific setup
      - name: Install Boost (Ubuntu)
        if: matrix.config.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libboost-all-dev
          echo "BOOST_ROOT=/usr" >> $GITHUB_ENV

      # Common build steps
      - name: Create Build Directory
        run: cmake -E make_directory ${{ github.workspace }}/build

      # Configure for each platform
      - name: Configure CMake (Windows)
        if: matrix.config.os == 'windows-latest'
        shell: pwsh
        working-directory: ${{ github.workspace }}/build
        run: |
          cmake ${{ github.workspace }} `
                -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
                -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" `
                -DCMAKE_PREFIX_PATH="$env:VCPKG_ROOT/installed/x64-windows" `
                -DBoost_DIR="$env:VCPKG_ROOT/installed/x64-windows/share/boost"

      - name: Configure CMake (Unix)
        if: matrix.config.os != 'windows-latest'
        shell: bash
        working-directory: ${{ github.workspace }}/build
        run: |
          cmake ${{ github.workspace }} \
                -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                -DCMAKE_C_COMPILER=${{ matrix.config.cc }} \
                -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} \
                -DBOOST_ROOT=${{ env.BOOST_ROOT }} \
                -DBoost_NO_SYSTEM_PATHS=ON

      # Build
      - name: Build
        working-directory: ${{ github.workspace }}/build
        shell: bash
        run: cmake --build . --config ${{ matrix.build_type }}

      # Test
      - name: Test (Windows)
        if: matrix.config.os == 'windows-latest'
        working-directory: ${{ github.workspace }}/build
        shell: pwsh
        run: |
          $env:PATH = "$env:VCPKG_ROOT\installed\x64-windows\bin;$env:PATH"
          ctest -C ${{ matrix.build_type }} --output-on-failure --verbose

      - name: Test (Unix)
        if: matrix.config.os != 'windows-latest'
        working-directory: ${{ github.workspace }}/build
        shell: bash
        run: |
          ctest -C ${{ matrix.build_type }} --output-on-failure --verbose

      # Upload artifacts on failure
      - name: Upload Test Results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.config.name }}-${{ matrix.build_type }}
          path: |
            ${{ github.workspace }}/build/Testing/Temporary/LastTest.log
            ${{ github.workspace }}/build/Testing/Temporary/LastTestsFailed.log

      - name: Upload CMake Logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cmake-logs-${{ matrix.config.name }}-${{ matrix.build_type }}
          path: |
            ${{ github.workspace }}/build/CMakeFiles/CMakeOutput.log
            ${{ github.workspace }}/build/CMakeFiles/CMakeError.log
            ${{ github.workspace }}/build/CMakeCache.txt
